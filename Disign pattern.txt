1.Singleton -> 在同一個時間上只能有一個物件
    一個類別只有一個實例
    舉例:汽車的車牌，一輛車只會有一個車牌

2.Factory -> Client端透過factory來建立物件
    舉例:清理魚,流程都是固定為先刮鱗，再剖腹清洗內臟
        
3.Factory Method -> 將Factory抽象化，讓每個子類別都有屬於自己工廠的類別
    舉例:一家鞋子製造廠有賣多種鞋款，但製作的過程步驟都一樣
        ，可以透過Factory來實作處理製作過程的方法，這樣可以節省成本
        
4.Prototype -> 利用這個原型去產生物件，使用的方法是用clone
    舉例:7-11的加盟店，以一樣的此種模式去實作clone

5.Adapter -> 單純轉接(透過代理人去做)，介面格式不同,但方法相同
    舉例:一套軟體，他希望能跟其他廠商的資料庫結合，但新廠商所設計出來的介面，不同於舊廠商的介面
        這時候就需要透過Adapter來建立一個類別來轉介

6.Bridge ->透過介面來找方法去做，介面格式相同，但實作方法不同
    舉例:畫素描，可以用筆.色鉛筆.碳筆.鋼筆.原子筆.沾水的方法去畫

7.Decorator -> 可以透過多層的Decorator物件來擴充主物件
    舉例:早餐店，火腿+起司+荷包蛋+三明治

8.Facade -> 將多種的類別包裝成一個大型的類別
    舉例:醫院依部門分為掛號、門診、劃價、化驗、收費、取藥

9.Observver -> 物件之間的一對多關係，當一個物件改變狀態，其他相依者都會收到通知並自動被更新
    舉例:報社，需要自行去報社訂閱報紙，每天都會將最新的新聞主動發送

10.Command ->封裝請求，然後進行一系列的參數化或操作
    舉例:走路的情境，有前進.後退.左轉.右轉